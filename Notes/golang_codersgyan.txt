5 Reasons to choose Golang
l. Build Time - Deploy k Pehle hum build bnate hai. Build time fast hai compared to other language.
2. Fast startup - Compile under machine code 
3. Performance and Efficiency - Due to concurrency model
4. Concurrency model - several light weight threads run parallel
5. Static typing and compilation - type checking, we have to define type 

Installation
- goto - go.dev
- Donload Setup - Install
- Check version - go version
- In vs code - Download Extension - Go(Go team at Google)

Hello World Program
- Create a folder - 1_hello_world
- Create a file inside folder - main.go
- Program
package main
func main(){
 fmt.Println("Hello World")
}

Run Program
go build 1_hello_world/main.go
./main

go run 1_hello_world/main.go

Simple values
package main
import "fmt"
func main() {
	// int
	fmt.Println(1 + 1)
	// string
	fmt.Println("Hello Golang")
	// bool
	fmt.Println(true)
	fmt.Println(false)
	//floats
	fmt.Println(10.5)
	fmt.Println(7.0 / 3.0)
}

Variables
package main
import "fmt"
func main() {
	// var name string = "golang"
	var name = "Kumar"
	fmt.Println(name)

	var IsAdult = true
	fmt.Println(IsAdult)

	var age int = 30
	fmt.Println(age)

	// shorthand
	lname := "Saurav"
	fmt.Println(lname)
	// If we want only declaration then we have to define type
	var myName string
	myName = "KS"
	fmt.Println(myName)
}
-----------------------------
Constants
package main

import "fmt"

const name = "Kumar Saurav"

func main() {
	const age = 30
	fmt.Println(name, age)

	const (
		port = 5000
		host = "localhost"
	)
	fmt.Println(port, host)
}
-------------------------------
For

package main
import (
	"fmt"
)

func main() {
	// for -> only construct in go for looping
	//while loop
	i := 1
	for i <= 3 {
		fmt.Println(i)
		i = i + 1
	}

	// classic for loop
	for i := 0; i <= 3; i++ {
		fmt.Println(i)
	}

	//break and continue
	for i := 0; i <= 3; i++ {
		//break
		if i == 2 {
			continue
		}
		fmt.Println(i)
	}

	//range
	for i := range 5 {
		fmt.Println(i)
	}
}
------------------------
If Else

package main

import "fmt"

func main() {
	age := 10
	if age >= 18 {
		fmt.Println("You are an adult.")
	} else {
		fmt.Println("You are not an adult")
	}

	//if elseif
	if age >= 18 {
		fmt.Println("You are an adult")
	} else if age > 12 {
		fmt.Println("You are a teenager")
	} else {
		fmt.Println("You are a kid")
	}

	//logical operator
	var role = "admin"
	var hasPermission = false
	if role == "admin" && hasPermission {
		fmt.Println("Welcome")
	} else {
		fmt.Println("Sorry")
	}

	//declare variable inside if construct
	if age := 14; age >= 18 {
		fmt.Println("Person is an adult")
	} else if age > 12 {
		fmt.Println("Person is a teenager")
	}

	// go does not have ternary, you will have to use normal if else
}
------------------------------
Switch
package main

import (
	"fmt"
	"time"
)

func main() {
	num := 10
	switch num {
	case 1:
		fmt.Println("One")
	case 2:
		fmt.Println("Two")
	case 3:
		fmt.Println("Three")
	case 4:
		fmt.Println("Four")
	case 5:
		fmt.Println("Five")
	default:
		fmt.Println("Other")
	}

	//multiple condition switch
	switch time.Now().Weekday() {
	case time.Saturday, time.Sunday:
		fmt.Println("Its a Weekday.")
	default:
		fmt.Println("Its a Working Day")
	}

	//type switch
	whoAmI := func(i interface{}) {
		switch t := i.(type) {
		case int:
			fmt.Println("Its a Integer")
		case string:
			fmt.Println("Its a string")
		case bool:
			fmt.Println("Its a boolean")
		default:
			fmt.Println("Other", t)
		}
	}
	whoAmI(12)
	whoAmI("Kumar")
	whoAmI(true)
	whoAmI(12.4)
}
------------------------
Arrays
package main

import "fmt"

func main() {
	var nums [4]int
	//array length
	fmt.Println(len(nums))

	//Insert values in array
	nums[0] = 1
	fmt.Println(nums[0])
	fmt.Println(nums)

	var vals [4]bool
	fmt.Println(vals)

	var names [3]string
	names[0] = "golang"
	fmt.Println(names)

	//declare array values in single line
	numbers := [3]int{1, 2, 3}
	fmt.Println(numbers)

	// 2d arrays
	numbs := [2][2]int{{3, 4}, {5, 6}}
	fmt.Println(numbs)
}
----------------------------------------------
Slices
- Dynamic - When we dont know the size of array we should use slices.
- Most used construct in go.
- Useful methods for using array.

package main

import (
	"fmt"
	"slices"
)

func main() {
	var nums []int
	fmt.Println(nums)
	fmt.Println(nums == nil)
	fmt.Println(len(nums))

	//If we want to give it initial size
	var nums1 = make([]int, 2, 2) //parameters (type,size,capacity?optional)
	fmt.Println(nums1)
	fmt.Println(nums1 == nil)
	//capacity -> max number of elements can fit . As it is dynamic it can change automatically.
	fmt.Println(cap(nums1))
	nums1 = append(nums1, 1)
	fmt.Println(cap(nums1))
	nums1 = append(nums1, 2)
	nums1 = append(nums1, 3)
	nums1 = append(nums1, 4)
	fmt.Println(cap(nums1))
	fmt.Println(nums1)
	nums2 := []int{}
	nums2 = append(nums2, 1)
	nums2 = append(nums2, 2)
	fmt.Println(nums2)
	fmt.Println(len(nums2))
	fmt.Println(cap(nums2))
	nums2[1] = 3
	fmt.Println(nums2)

	//copy function
	var nums3 = make([]int, 0, 5)
	nums3 = append(nums3, 2)
	var nums4 = make([]int, len(nums3))
	copy(nums4, nums3)
	fmt.Println(nums3, nums4)

	//slice operator
	var numbers = []int{1, 2, 3}
	fmt.Println(numbers[0:2])
	fmt.Println(numbers[0:1])
	fmt.Println(numbers[:2])
	fmt.Println(numbers[1:])

	//slices package
	var numbers1 = []int{1, 2, 3}
	var numbers2 = []int{1, 2, 4}
	fmt.Println(slices.Equal(numbers1, numbers2))

	var numbers3 = [][]int{{1, 2, 3}, {4, 5, 6}}
	fmt.Println(numbers3)
}

---------------------------
Maps
Maps -> hash, object, dict
package main

import (
	"fmt"
	"maps"
)

func main() {
	m := make(map[string]string)
	//setting an element
	m["name"] = "golang"
	m["area"] = "backend"
	//get an element
	fmt.Println(m["name"], m["area"])
	//If key does not exist then it returns zero value
	fmt.Println(m["phone"])
	m1 := make(map[string]int)
	m1["age"] = 30
	m1["price"] = 50
	fmt.Println(m1["age"], m1["phone"])
	//to know the length of map
	fmt.Println(len(m), len(m1))
	//to delete  a value from map
	delete(m1, "price")
	fmt.Println(m1, len(m1))
	//clear all values from map
	clear(m1)
	fmt.Println(m1)
	//elements avaiable on declaration
	m2 := map[string]int{"price": 50, "phones": 3}
	fmt.Println(m2)
	//check if elements are there in map
	v, ok := m2["phones"]
	if ok {
		fmt.Println("All ok")
		fmt.Println("Value is ", v)
	} else {
		fmt.Println("Not ok")
	}
	// comparing for equality
	m3 := map[string]int{"price": 50, "phones": 3}
	fmt.Println(maps.Equal(m2, m3))
}
-----------------------------------
Range
package main

import "fmt"

func main() {
	nums := []int{2, 4, 6}
	//Iterating using for loop
	for i := 0; i < len(nums); i++ {
		fmt.Println(nums[i])
	}
	//Iterating using range
	for i, num := range nums {
		fmt.Println(num, i)
	}
	//Sum using range
	sum := 0
	for _, num := range nums {
		sum = sum + num
	}
	fmt.Println(sum)
	//print maps value using range. point rune
	m := map[string]string{"fname": "kumar", "lname": "saurav"}
	for k, v := range m {
		fmt.Println(k, v)
	}
	// unicode in "golang"
	for i, c := range "golang" {
		fmt.Println(i, c, " '"+string(c)+"' ")
	}
}














